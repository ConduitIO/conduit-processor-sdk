syntax = "proto3";

package processor.v1;

import "opencdc/v1/opencdc.proto";

message Command {
  oneof command {
    Specify.Command specify_cmd = 1;
    Configure.Command configure_cmd = 2;
    Open.Command open_cmd = 3;
    Process.Command process_cmd = 4;
    Teardown.Command teardown_cmd = 5;
  }
}
message CommandResponse {
  oneof response {
    Specify.Response specify_resp = 1;
    Configure.Response configure_resp = 2;
    Open.Response open_resp = 3;
    Process.Response process_resp = 4;
    Teardown.Response teardown_resp = 5;
  }
}

message Specify {
  message Command {}
  message Response {
    // Name is the name of the plugin.
    string name = 1;
    // Summary is a brief description of the plugin and what it does,
    // ideally not longer than one sentence.
    string summary = 2;
    // Description is a longer form field, appropriate for README-like
    // text that the author can provide for documentation about the
    // usage of the plugin.
    string description = 3;
    // Version string. Should follow semantic versioning and use the "v"
    // prefix (e.g. v1.23.4).
    string version = 4;
    // Author declares the entity that created or maintains this plugin.
    string author = 5;
    // A map that describes parameters available for configuring the
    // destination plugin.
    map<string, Parameter> parameters = 6;
    string err = 7;
  }

  // Parameter describes a single config parameter.
  message Parameter {
    // Validation to be made on the parameter.
    message Validation {
      enum Type {
        TYPE_UNSPECIFIED = 0;
        // Parameter must be present.
        TYPE_REQUIRED = 1;
        // Parameter must be greater than {value}.
        TYPE_GREATER_THAN = 2;
        // Parameter must be less than {value}.
        TYPE_LESS_THAN = 3;
        // Parameter must be included in the comma separated list {value}.
        TYPE_INCLUSION = 4;
        // Parameter must not be included in the comma separated list {value}.
        TYPE_EXCLUSION = 5;
        // Parameter must match the regex {value}.
        TYPE_REGEX = 6;
      }

      Type type = 1;
      // The value to be compared with the parameter,
      // or a comma separated list in case of Validation.TYPE_INCLUSION or Validation.TYPE_EXCLUSION.
      string value = 2;
    }

    // Type shows the parameter type.
    enum Type {
      TYPE_UNSPECIFIED = 0;
      // Parameter is a string.
      TYPE_STRING = 1;
      // Parameter is an integer.
      TYPE_INT = 2;
      // Parameter is a float.
      TYPE_FLOAT = 3;
      // Parameter is a boolean.
      TYPE_BOOL = 4;
      // Parameter is a file.
      TYPE_FILE = 5;
      // Parameter is a duration.
      TYPE_DURATION = 6;
    }

    // Default is the default value of the parameter. If there is no default
    // value use an empty string.
    string default = 1;
    // Description explains what the parameter does and how to configure it.
    string description = 2;
    // Type defines the parameter data type.
    Type type = 3;
    // Validations are validations to be made on the parameter.
    repeated Validation validations = 4;
  }
}

message Configure {
  message Command {
    map<string, string> parameters = 1;
  }

  message Response {
    string err = 1;
  }
}

message Open {
  message Command {}
  message Response {
    string err = 1;
  }
}

message Process {
  message Command {
    repeated opencdc.v1.Record records = 1;
  }
  message Response {
    repeated ProcessedRecord records = 1;
  }
  message ProcessedRecord {
    oneof record {
      opencdc.v1.Record single_record = 1;
      FilterRecord filter_record = 2;
      ErrorRecord error_record = 3;
    }
  }
  message FilterRecord {}
  message ErrorRecord {
    string err = 1;
  }
}

message Teardown {
  message Command {}
  message Response {
    string err = 1;
  }
}